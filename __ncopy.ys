#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Ryan Montgomery - rmontgo2
#
# Describe how and why you modified the baseline code.
# - Replaced irmovq + addq instructions with iaddq instructions
# - Utilized loop unrolling.  Calculations indicated that copying
# values in blocks of 8 would be most efficient, which is why this
# many values are copied at a time in the big loop.  The way the
# program works is to basically check that there are at least 8
# values, and then start using the big loop to copy values, then
# when there len < 8, start using the small loop to copy values.
# - moved around calls to remove bubbles
# - very heavily optimized small sizes, breaking them down into paths that 
# - should be taken based on their sizes such that we can optimize them farther
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################

# %rdi = src, %rsi = dst, %rdx = len
# You can modify this portion
        # Loop header
        xorq %rax,%rax          # count = 0;
        andq %rdx,%rdx          # len <= 0?
        jle Done                # if so, goto Done:

BigCheck:
        rrmovq %rdx, %rbx
        iaddq $-10, %rbx          # Check if the block is big enough to use loop unrolling
        jl SmallLoop
StartBigLoop:			
        #load this and next value... then
        mrmovq (%rdi), %rcx	
        mrmovq 0x8(%rdi), %r8	
        rmmovq %rcx, (%rsi)	# Put the register values into the dest memory locations
        andq %rcx, %rcx
        jle BL2
        iaddq $1, %rax		# If positive integer, count++
BL2:
        mrmovq 0x10(%rdi), %r9
        rmmovq %r8, 0x8(%rsi)
        andq %r8, %r8
        jle BL3
        iaddq $1, %rax		# If positive integer, count++

BL3:
        mrmovq 0x18(%rdi), %r10
        rmmovq %r9, 0x10(%rsi)
        andq %r9, %r9
        jle BL4
        iaddq $1, %rax		# If positive integer, count++
BL4: 
        mrmovq 0x20(%rdi), %r11
        rmmovq %r10, 0x18(%rsi)
        andq %r10, %r10
        jle BL5
        iaddq $1, %rax		# If positive integer, count++
BL5: 
        mrmovq 0x28(%rdi), %r12
        rmmovq %r11, 0x20(%rsi)
        andq %r11, %r11
        jle BL6
        iaddq $1, %rax		# If positive integer, count++
BL6:
        mrmovq 0x30(%rdi), %r13
        rmmovq %r12, 0x28(%rsi)
        andq %r12, %r12
        jle BL7
        iaddq $1, %rax		# If positive integer, count++
BL7:
        mrmovq 0x38(%rdi), %r14
        rmmovq %r13, 0x30(%rsi)
        andq %r13, %r13
        jle BL8
        iaddq $1, %rax		# If positive integer, count++
BL8:
        mrmovq 0x40(%rdi), %r8
        rmmovq %r14, 0x38(%rsi)
        andq %r14, %r14
        jle BL9
        iaddq $1, %rax		# If positive integer, count++
BL9:
        mrmovq 0x48(%rdi), %r9
        rmmovq %r8, 0x40(%rsi)
        andq %r8, %r8
        jle BigLoopEnd
        iaddq $1, %rax		# If positive integer, count++
BigLoopEnd:
        rmmovq %r9, 0x48(%rsi)
        andq %r9, %r9
        jle BigInc
        iaddq $1, %rax		# If positive integer, count++
BigInc:
        iaddq 0x50, %rdi	# src += 80
        iaddq 0x50, %rsi	# dst += 80
        iaddq $-10, %rdx  # len -= 10
        jge StartBigLoop
SmallCheck:
	andq %rdx, %rdx		# Check if there are elements left
        jle Done                # If there are no elements left, go to Done
SmallLoop:   
        mrmovq (%rdi), %r10     # Read val from src
        rmmovq %r10, (%rsi)     # Store val to dst
        andq %r10, %r10         # Is val positive?
        jle Inc                 # If not, go to Inc (skipping count):
        iaddq $1, %rax          # count++
Inc:   
        iaddq $-1, %rdx         # len--
        iaddq $8, %rdi          # src++
        iaddq $8, %rsi          # dst++
        andq %rdx,%rdx          # check if len > 0
        jg SmallLoop            # if so, goto SmallLoop:



##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
