#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Mattie fuller.
# Teammates: Ryan Montgomery - rmontgo2
#
# Describe how and why you modified the baseline code.
# - Replaced irmovq + addq instructions with iaddq instructions
# - Utilized loop unrolling.  Calculations indicated that copying
# values in blocks of 8 would be most efficient, which is why this
# many values are copied at a time in the big loop.  The way the
# program works is to basically check that there are at least 8
# values, and then start using the big loop to copy values, then
# when there len < 8, start using the small loop to copy values.
# - moved around calls to remove bubbles
# - very heavily optimized small sizes, breaking them down into a tree to parse them
# should be taken based on their sizes such that we can optimize them farther. 
# By placing all the tree paths in order from high to low at the bottom we make use of
# jump PC prediction to hopefully speed that up aswell.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################

# %rdi = src, %rsi = dst, %rdx = len
##################################################################
# You can modify this portion
        # Loop header
        iaddq $-10,%rdx         # less than 10 total remaining
        jl TreeRoot                 # if so, goto TreeRoot:


BigLoop1:  mrmovq (%rdi), %r10    
        mrmovq 8(%rdi), %r11   
        rmmovq %r10, (%rsi)     
        andq %r10, %r10         
        jle BigLoop2              
        iaddq $1, %rax                # inc counter     

BigLoop2:  mrmovq 16(%rdi), %r10   
        rmmovq %r11, 8(%rsi)   
        andq %r11, %r11        
        jle BigLoop3             
        iaddq $1, %rax                # inc counter

BigLoop3:  mrmovq 24(%rdi), %r11  
        rmmovq %r10, 16(%rsi) 
        andq %r10, %r10        
        jle BigLoop4               
        iaddq $1, %rax                # inc counter

BigLoop4:  mrmovq 32(%rdi), %r10  
        rmmovq %r11, 24(%rsi)  
        andq %r11, %r11       
        jle BigLoop5             
        iaddq $1, %rax                # inc counter

BigLoop5:  mrmovq 40(%rdi), %r11  
        rmmovq %r10, 32(%rsi)   
        andq %r10, %r10         
        jle BigLoop6              
        iaddq $1, %rax                # inc counter

BigLoop6:  mrmovq 48(%rdi), %r10   
        rmmovq %r11, 40(%rsi)  
        andq %r11, %r11        
        jle BigLoop7              
        iaddq $1, %rax                # inc counter

BigLoop7:  mrmovq 56(%rdi), %r11 
        rmmovq %r10, 48(%rsi)  
        andq %r10, %r10        
        jle BigLoop8             
        iaddq $1, %rax                # inc counter

BigLoop8:  mrmovq 64(%rdi), %r10   
        rmmovq %r11, 56(%rsi)   
        andq %r11, %r11        
        jle BigLoop9               
        iaddq $1, %rax                # inc counter

BigLoop9:  mrmovq 72(%rdi), %r11   
        rmmovq %r10, 64(%rsi)  
        andq %r10, %r10         
        jle BigLoop10            
        iaddq $1, %rax                # inc counter
        
BigLoop10: #mrmovq 64(%rdi), %r10  
        rmmovq %r11, 72(%rsi)  
        andq %r11, %r11       
        jle BigLoop               
        iaddq $1, %rax                # inc counter

BigLoop:
        iaddq $80, %rdi       
        iaddq $80, %rsi      
        iaddq $-10,%rdx            # len >= 10?
        jge BigLoop1               # jump BigLoop1:

#less then 10 are left if we hit this node.
TreeRoot:
        iaddq   $7,%rdx         # less than 3 left?
        jl      TreeLeft        # 7 < len, less than 7 left,
        jg      TreeRight       # 7 > len, more than 7 left
        je      ThreeElementsAreLeft         # 3 left exactly
TreeLeft:
        iaddq   $2,%rdx         # 1 left
        je      OneElementIsLeft
        iaddq   $-1,%rdx        # two left
        je      TwoElementsAreLeft
        ret                     # done
TreeRight:
        iaddq   $-3,%rdx        # more than six left
        jg      TreeRightRight
        je      SixElementsAreLeft         # 6 left
        iaddq   $1,%rdx     
        je      FiveElementsAreLeft         # 5 left
        jmp     FourElementsAreLeft         # 4 left

TreeRightRight:
        iaddq   $-2,%rdx
        jl      SevenElementsAreLeft
        je      EightElementsAreLeft

#Constants are fast, and we don't want to jump much. So below 10 items it is all Constants
#and very few jumps. 

#fall through to nine elements if no other case triggers.
NineElementsAreLeft:
    mrmovq 0x40(%rdi), %r9 
    rmmovq %r9, 0x40(%rsi)
    andq %r9, %r9 #compare val <= 0 for EightElementsAreLeft jump case

EightElementsAreLeft:
    mrmovq 0x38(%rdi), %r9 #read our data in
    jle EightElementsAreLeft_Valid
    iaddq $1, %rax # inc counter

EightElementsAreLeft_Valid:
    rmmovq %r9, 0x38(%rsi)
    andq %r9, %r9 #compare val <= 0 for SevenElementsAreLeft jump case

SevenElementsAreLeft:
        mrmovq 0x30(%rdi), %r9   
        jle SevenElementsAreLeft_Valid           
        iaddq $1, %rax     

SevenElementsAreLeft_Valid:    
    rmmovq %r9, 0x30(%rsi)
    andq %r9, %r9 #compare val <= 0 for SixElementsAreLeft jump case

SixElementsAreLeft:
        mrmovq 0x28(%rdi), %r9
        jle SixElementsAreLeft_Valid         
        iaddq $1, %rax 

SixElementsAreLeft_Valid:
        rmmovq %r9, 0x28(%rsi)
        andq %r9, %r9 #compare val <= 0 for FiveElementsAreLeft jump case

FiveElementsAreLeft:
        mrmovq 0x20(%rdi), %r9
        jle FiveElementsAreLeft_Valid            
        iaddq $1, %rax           

FiveElementsAreLeft_Valid:
        rmmovq %r9, 0x20(%rsi)
        andq %r9, %r9 #compare val <= 0 for FourElementsAreLeft jump case

FourElementsAreLeft:
        mrmovq 0x18(%rdi), %r9  
        jle FourElementsAreLeft_Valid    
        iaddq $1, %rax           

FourElementsAreLeft_Valid:
        rmmovq %r9, 0x18(%rsi)
        andq %r9, %r9  #compare val <= 0 for ThreeElementsAreLeft jump case

ThreeElementsAreLeft:
        mrmovq 0x10(%rdi), %r9
        jle ThreeElementsAreLeft_Valid         
        iaddq $1, %rax              

ThreeElementsAreLeft_Valid:
        rmmovq %r9, 0x10(%rsi)
        andq %r9, %r9 #compare val <= 0 for TwoElementsAreLeft jump case

TwoElementsAreLeft:
        mrmovq 0x8(%rdi), %r9
        jle TwoElementsAreLeft_Valid        
        iaddq $1, %rax        

TwoElementsAreLeft_Valid:
        rmmovq %r9, 0x8(%rsi)
        andq %r9, %r9 #compare val <= 0 for OneElementsAreLeft jump case

OneElementIsLeft:
        mrmovq (%rdi), %r9
        jle OneElementIsLeft_Valid          
        iaddq $1, %rax         

OneElementIsLeft_Valid:
        rmmovq %r9, (%rsi)
        andq %r9, %r9  #compare val <= 0 for done jump case.
        jle Done               
        iaddq $1, %rax               

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
        ret
##################################################################
# Keep the following label at the end of your function
EndFun:
End:
#/* $end ncopy-ys */